/*
 * Copyright 2019 Aletheia Ware LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option go_package = "github.com/AletheiaWareLLC/bcgo";
option java_outer_classname = "BCProto";
option java_package = "com.aletheiaware.bc";

package bc;

import "crypto.proto";

message Block {
    // Timestamp (nanoseconds) when the block was created.
    fixed64 timestamp = 1;
    // Name of the channel.
    string channel_name = 2;
    // Length of chain in blocks (inclusive).
    fixed64 length = 3;
    // Hash of the previous block in the chain.
    bytes previous = 4;
    // Alias of the block miner's public key.
    string miner = 5;
    // The nonce mined to reach threshold.
    fixed64 nonce = 6;
    // The block's entries (list of hash/record pairs).
    repeated BlockEntry entry = 7;
}

message BlockEntry {
    // Hash of the record.
    bytes record_hash = 1;
    Record record = 2;
}

message Record {
    // Timestamp (nanoseconds) when the record was created.
    fixed64 timestamp = 1;
    // Alias of the record creator's public key.
    string creator = 2;
    message Access {
        // Alias of the public key granted access, empty if public.
        string alias = 1;
        // The secret access key used to encrypt the payload.
        bytes secret_key = 2;
        // If the alias is set, the secret key will be encrypted by the alias' public key.
        // The algorithm used to encrypt the secret key.
        crypto.EncryptionAlgorithm encryption_algorithm = 3;
    }
    // The list of accesses granted.
    repeated Access access = 3;
    // Holds record content, optionally encrypted with a secret key.
    bytes payload = 4;
    // The algorithm used to compress the payload.
    crypto.CompressionAlgorithm compression_algorithm = 5;
    // The algorithm used to encrypt the payload.
    crypto.EncryptionAlgorithm encryption_algorithm = 6;
    // Signature of payload (signed by the record creator's private key).
    bytes signature = 7;
    // The algorithm used to sign the payload.
    crypto.SignatureAlgorithm signature_algorithm = 8;
    // References to previous records.
    repeated Reference reference = 9;
}

message Reference {
    // Timestamp (nanoseconds) when the referenced item was created.
    fixed64 timestamp = 1;
    // Name of the channel holding the referenced item.
    string channel_name = 2;
    // Hash of the block holding the referenced item.
    bytes block_hash = 3;
    // Hash of the record holding the referenced item.
    bytes record_hash = 4;
}
